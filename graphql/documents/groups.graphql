query GetGroup($auth: Auth!, $id: String) {
  group(auth: $auth, id: $id) {
    id
    name
    displayName
    description
    type
  }
}

query GetGroupWithMembers($auth: Auth!, $id: String) {
  group(auth: $auth, id: $id) {
    id
    name
    displayName
    description
    type
    MapUserGroup {
      userId
      isAdmin
      User {
        uuid
        username
        email
        displayName
      }
    }
  }
}

query MyJoinedGroupsCP($first: Int!, $after: String) {
  myJoinedGroupsCP(first: $first, after: $after) {
    edges {
      node {
        id
        name
        displayName
        description
        type
      }
      cursor
    }
    pageInfo {
      endCursor
      hasNextPage
    }
  }
}

mutation CreateGroup($auth: Auth!, $name: String!, $displayName: String, $type: GroupType) {
  createGroup(auth: $auth, name: $name, displayName: $displayName, type: $type) {
    id
    name
    displayName
    description
    type
  }
}

mutation UpdateGroup($auth: Auth!, $id: String!, $name: String, $displayName: String, $description: String, $type: GroupType) {
  updateGroup(auth: $auth, id: $id, name: $name, displayName: $displayName, description: $description, type: $type) {
    id
    name
    displayName
    description
    type
  }
}

mutation DeleteGroup($auth: Auth!, $id: String!) {
  deleteGroup(auth: $auth, id: $id) {
    id
  }
}

mutation CreateGroupMember($auth: Auth!, $userId: String!, $groupId: String!, $isAdmin: Int) {
  createMapUserGroup(auth: $auth, userId: $userId, groupId: $groupId, isAdmin: $isAdmin) {
    groupId
    userId
    isAdmin
  }
}

mutation UpdateGroupMember($auth: Auth!, $userId: String!, $groupId: String!, $isAdmin: Int) {
  updateMapUserGroup(auth: $auth, userId: $userId, groupId: $groupId,  isAdmin: $isAdmin) {
    groupId
    userId
    isAdmin
  }
}

mutation DeleteGroupMember($auth: Auth!, $userId: String!, $groupId: String!) {
  deleteMapUserGroup(auth: $auth, userId: $userId, groupId: $groupId) {
    groupId
    userId
  }
}

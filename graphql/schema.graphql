enum Auth {
  user,
  admin,
  none,
}

enum GroupType {
  public,
  normal,
  private,
}

type PageInfo {
    endCursor: String
    hasNextPage: Boolean
}

type UserSession {
  id: String!
  random: String!
}

type AdminSession {
  admin: Boolean!
  random: String!
}

type Session {
  userSession: UserSession
  adminSession: AdminSession
}

type Configuration {
  authEnableEmailVerificationForLocalUsers: Int!
  authEnableSamlLogin: Int!
  groupEnableCreateGroupForUsers: Int!
}

type Saml {
  id: String!
  name: String!
  displayName: String!
  entryPoint: String!
  issuer: String!
  cert: String!
  userMapping: String!
  attributeMappingForUuid: String!
  attributeMappingForUsername: String!
  attributeMappingForEmail: String!
}

type User {
  id: String!
  uuid: String!
  username: String!
  email: String!
  displayName: String
  follow: [Follow]
  followed: [Follow]
}

type UserEdge {
  node: User
  cursor: String
}

type UserConnection {
  edges: [UserEdge]
  pageInfo: PageInfo
}

type Group {
  id: String!
  name: String!
  displayName: String
  description: String
  type: GroupType!
}

type GroupEdge {
  node: Group
  cursor: String
}

type GroupConnection {
  edges: [GroupEdge]
  pageInfo: PageInfo
}


type MapUserGroup {
  userId: String!
  groupId: String!
  isAdmin: Int!
  user: User
  group: Group
}

type GroupWithMember {
  id: String!
  name: String!
  displayName: String
  description: String
  type: GroupType!
  user_group_map: [MapUserGroup]!
}

type Paper {
  id: String!
  userId: String!
  groupId: String!
  documentIdLazy: String
  title: String!
  tags: String!
  body: String!
  isPosted: Int!
  user: User!
  group: Group!
  createdAt: String!
  updatedAt: String!
}

type Document {
  id: String!
  paperId: String!
  paper: Paper!
  createdAt: String!
}

type DocumentEdge {
  node: Document
  cursor: String
}

type DocumentConnection {
  edges: [DocumentEdge]
  pageInfo: PageInfo
}

type StockCategory {
  id: String!
  userId: String!
  name: String!
}

type Stock {
  userId: String!
  documentId: String!
  stockCategoryId: String!
}

type Like {
  userId: String!
  documentId: String!
}

type Comment {
  id: String!
  userId: String!
  documentId: String!
  rawCommentId: String!
  referenceCommentIdLazy: String
  createdAt: String!
  user: User!
  comment_raw: RawComment!
}

type RawComment {
  id: String!
  userId: String!
  commentIdLazy: String
  body: String!
  createdAt: String!
}

type Follow {
  fromUserId: String!
  toUserId: String!
}

type Watch {
  userId: String!
  groupId: String!
}

type Tag {
  id: String!
  text: String!
}

type MapPaperTag {
  paperId: String!
  tagId: String!
  paper: Paper
  tag: Tag
}


type EsShards {
  total: Int
  successful: Int
  skipped: Int
  failed: Int
}

type EsTotal {
  value: Int
  relation: String
}

type EsSearchDocument {
  paperId: String!
  userId: String!
  userName: String!
  userDisplayName: String
  groupId: String!
  groupName: String!
  groupDisplayName: String
  createdAt: String!
  updatedAt: String!
  title: String!
  body: String!
}

type EsSearchDocumentResult{
  _id: String
  _score: Float
  _source: EsSearchDocument
}

type EsSerarchDocumentsHits {
  max_score: Float
  total: EsTotal
  hits:[EsSearchDocumentResult]
}

type EsSearchDocmentsResponse {
  took: Int
  timed_out: Boolean
  _shards: EsShards
  hits: EsSerarchDocumentsHits
}

type EsCountResponse {
  count: Int
  _shards: EsShards
}

type EsSearchResponses {
  Documents: EsSearchDocmentsResponse
}

type EsCountResponses {
  Documents: EsCountResponse
  Groups: EsCountResponse
}

type Query {
  session: Session

  configuration(auth: Auth!): Configuration!
  samls(auth: Auth!): [Saml!]

  groups(auth: Auth!): [Group!]
  group(auth: Auth!, id: String, name: String): GroupWithMember

  joinedGroups(userId: String!): [Group!]
  myJoinedGroups: [Group!]
  myJoinedGroupsCP(first: Int!, after:String): GroupConnection

  users(auth: Auth!, offset: Int, limit: Int): [User]
  usersCP(auth: Auth!, first: Int!, after:String): UserConnection
  countUsers(auth: Auth!): Int!
  user(auth: Auth!, id: String, uuid: String, username: String, email: String): User

  myProfile: User
  myTimelineCP(first: Int!, after:String): DocumentConnection

  documents(auth: Auth!, userId: String, groupId: String): [Document]!
  documentsCP(auth: Auth!, userId: String, groupId: String, first: Int!, after:String): DocumentConnection
  document(auth: Auth!, id: String!): Document

  drafts(auth: Auth!, groupId: String, documentId: String): [Paper]!
  draft(auth: Auth!, id: String!): Paper

  stockCategories(auth: Auth!, userId: String): [StockCategory]!
  stocks(auth: Auth!, userId: String, documentId: String): [Stock]!
  countStocks(auth: Auth!, documentId: String!): Int!

  likes(auth: Auth!, userId: String, documentId: String): [Like]!
  countLikes(auth: Auth!, documentId: String!): Int!

  comments(auth: Auth!, userId: String, documentId: String): [Comment]!
  comment(auth: Auth!, id: String!): Comment

  follows(auth: Auth!, fromUserId: String, toUserId: String): [Follow]!
  watches(auth: Auth!, userId: String, groupId: String): [Watch]!

  esSearch(auth: Auth!, query: String!, index: String!, from: Int, size: Int): EsSearchResponses
  esCount(auth: Auth!, query: String): EsCountResponses
}

type Mutation {
  updateConfiguration(auth: Auth!, 
    authEnableEmailVerificationForLocalUsers: Int, 
    authEnableSamlLogin: Int, 
    groupEnableCreateGroupForUsers: Int 
  ): Configuration!

  createGroup(auth: Auth!, name: String!, displayName: String, description: String, type: GroupType): Group
  updateGroup(auth: Auth!, id:String!, name: String, displayName: String, description: String, type: GroupType): Group
  deleteGroup(auth: Auth!, id:String!): Group

  createMapUserGroup(auth: Auth!, userId: String!, groupId: String!, isAdmin: Int): MapUserGroup
  updateMapUserGroup(auth: Auth!, userId: String!, groupId: String!, isAdmin: Int): MapUserGroup
  deleteMapUserGroup(auth: Auth!, userId: String!, groupId: String!): MapUserGroup
  
  createPaper(auth: Auth!, userId: String, groupId: String!, title: String!, tags: String!, body: String!, documentId: String, isPosted: Int): Paper
  updatePaper(auth: Auth!, paperId: String!, title: String!, tags: String!, body: String!, isPosted: Int): Paper
  
  deleteDocument(auth: Auth!, id: String!): Document

  updateMyProfile(auth: Auth!, username: String, displayName: String): User

  createStockCategory(auth: Auth!, userId: String!, name: String!): StockCategory
  updateStockCategory(auth: Auth!, id: String!, name: String!): StockCategory
  deleteStockCategory(auth: Auth!, id: String!): StockCategory

  createStock(auth: Auth!, userId: String!, documentId: String!, stockCategoryId: String!): Stock
  deleteStock(auth: Auth!, userId: String!, documentId: String!, stockCategoryId: String!): Stock

  createLike(auth: Auth!, userId: String!, documentId: String!): Like
  deleteLike(auth: Auth!, userId: String!, documentId: String!): Like

  createComment(auth: Auth!, userId: String!, documentId: String!, referenceCommentIdLazy: String, body: String!): Comment
  updateComment(auth: Auth!, id: String!, body: String!): Comment
  deleteComment(auth: Auth!, id: String!): Comment

  createFollow(auth: Auth!, fromUserId: String!, toUserId: String!): Follow
  deleteFollow(auth: Auth!, fromUserId: String!, toUserId: String!): Follow

  createWatch(auth: Auth!, userId: String!, groupId: String!): Watch
  deleteWatch(auth: Auth!, userId: String!, groupId: String!): Watch

}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model follow {
  fromUserId String @db.VarChar(26)
  toUserId   String @db.VarChar(26)
  from       user   @relation("follow_fromUserIdTousers", fields: [fromUserId], references: [id], onDelete: Cascade)
  to         user   @relation("follow_toUserIdTousers", fields: [toUserId], references: [id], onDelete: Cascade)

  @@id([fromUserId, toUserId])
  @@index([fromUserId])
  @@index([toUserId])
}

model like {
  userId     String   @db.VarChar(26)
  documentId String   @db.VarChar(26)
  document   document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user       user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, documentId])
  @@index([documentId])
  @@index([userId])
}

model paper_tag_map {
  paperId String @db.VarChar(26)
  tagId   String @db.VarChar(26)
  paper   paper  @relation(fields: [paperId], references: [id])
  tag     tag    @relation(fields: [tagId], references: [id])

  @@id([paperId, tagId])
  @@index([paperId])
  @@index([tagId])
}

model watch {
  userId  String @db.VarChar(26)
  groupId String @db.VarChar(26)
  group   group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user    user   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, groupId])
  @@index([groupId])
  @@index([userId])
}

model attachment {
  id       String @id @db.VarChar(26)
  userId   String @db.VarChar(26)
  fileName String @db.VarChar(255)
  mimeType String @db.VarChar(63)
  blob     Bytes? @db.MediumBlob
  user     user   @relation(fields: [userId], references: [id], onDelete: NoAction)

  @@index([userId])
}

model comment {
  id                     String      @id @db.VarChar(26)
  userId                 String      @db.VarChar(26)
  documentId             String      @db.VarChar(26)
  rawCommentId           String      @db.VarChar(26)
  referenceCommentIdLazy String?     @db.VarChar(26)
  createdAt              String      @db.VarChar(50)
  createdAtNumber        BigInt      @default(0) @db.UnsignedBigInt
  document               document    @relation(fields: [documentId], references: [id], onDelete: Cascade)
  comment_raw            comment_raw @relation(fields: [rawCommentId], references: [id])
  user                   user        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([documentId])
  @@index([rawCommentId])
  @@index([userId])
}

model comment_raw {
  id              String    @id @db.VarChar(26)
  userId          String    @db.VarChar(26)
  documentId      String    @db.VarChar(26)
  commentIdLazy   String?   @db.VarChar(26)
  body            String    @db.Text
  createdAt       String    @db.VarChar(50)
  createdAtNumber BigInt    @default(0) @db.UnsignedBigInt
  document        document  @relation(fields: [documentId], references: [id])
  user            user      @relation(fields: [userId], references: [id])
  comment         comment[]

  @@index([commentIdLazy])
  @@index([documentId])
  @@index([userId])
}

model configuration {
  ensureSingleRow                          configurations_ensureSingleRow @unique @default(single)
  authEnableEmailVerificationForLocalUsers Int                            @default(0) @db.UnsignedTinyInt
  authEnableSamlLogin                      Int                            @default(0) @db.UnsignedTinyInt
  groupEnableCreateGroupForUsers           Int                            @default(0) @db.UnsignedTinyInt
}

model document {
  id              String        @id @db.VarChar(26)
  paperId         String        @db.VarChar(26)
  isShared        Int           @default(0) @db.UnsignedTinyInt
  createdAt       String        @db.VarChar(50)
  createdAtNumber BigInt        @default(0) @db.UnsignedBigInt
  paper           paper         @relation(fields: [paperId], references: [id])
  comment         comment[]
  comment_raw     comment_raw[]
  like            like[]
  stock           stock[]

  @@index([paperId])
}

model group_icon {
  id       String @id @db.VarChar(26)
  groupId  String @unique @db.VarChar(26)
  mimeType String @db.VarChar(63)
  blob     Bytes? @db.Blob
  group    group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model group {
  id             String           @id @db.VarChar(26)
  name           String           @unique @db.VarChar(127)
  displayName    String?          @db.VarChar(127)
  description    String?          @db.VarChar(255)
  type           group_type       @default(public)
  group_icon     group_icon?
  paper          paper[]
  user_group_map user_group_map[]
  watch          watch[]

  @@index([type])
}

model notification {
  id              String @id @db.VarChar(26)
  userId          String @db.VarChar(26)
  body            String @db.Text
  isRead          Int    @default(0) @db.TinyInt
  createdAt       String @db.VarChar(50)
  createdAtNumber BigInt @default(0) @db.UnsignedBigInt
  user            user   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model paper {
  id                String          @id @db.VarChar(26)
  userId            String          @db.VarChar(26)
  groupId           String          @db.VarChar(26)
  documentIdLazy    String?         @db.VarChar(26)
  parentPaperIdLazy String?         @db.VarChar(26)
  title             String          @db.VarChar(255)
  body              String          @db.LongText
  isPosted          Int             @default(0) @db.UnsignedTinyInt
  canReadAll        Int             @default(0) @db.UnsignedTinyInt
  createdAt         String          @db.VarChar(50)
  createdAtNumber   BigInt          @default(0) @db.UnsignedBigInt
  updatedAt         String          @db.VarChar(50)
  updatedAtNumber   BigInt          @default(0) @db.UnsignedBigInt
  group             group           @relation(fields: [groupId], references: [id])
  user              user            @relation(fields: [userId], references: [id])
  document          document[]
  paper_tag_map     paper_tag_map[]

  @@index([canReadAll])
  @@index([createdAtNumber])
  @@index([documentIdLazy])
  @@index([groupId])
  @@index([isPosted])
  @@index([parentPaperIdLazy])
  @@index([updatedAtNumber])
  @@index([userId])
}

model saml_idp {
  id                          String               @id @db.VarChar(26)
  name                        String               @unique @db.VarChar(50)
  displayName                 String               @db.VarChar(255)
  entryPoint                  String               @db.VarChar(255)
  issuer                      String               @db.VarChar(255)
  cert                        String               @db.Text
  userMapping                 saml_idp_userMapping @default(email)
  attributeMappingForUuid     String?              @db.VarChar(255)
  attributeMappingForUsername String?              @db.VarChar(255)
  attributeMappingForEmail    String?              @db.VarChar(255)
}

model stock_category {
  id     String  @id @db.VarChar(26)
  userId String  @db.VarChar(26)
  name   String  @db.VarChar(127)
  user   user    @relation(fields: [userId], references: [id], onDelete: Cascade)
  stock  stock[]

  @@index([userId])
}

model stock {
  userId          String         @db.VarChar(26)
  documentId      String         @db.VarChar(26)
  stockCategoryId String         @db.VarChar(26)
  document        document       @relation(fields: [documentId], references: [id], onDelete: Cascade)
  stock_category  stock_category @relation(fields: [stockCategoryId], references: [id])
  user            user           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([documentId, userId, stockCategoryId])
  @@index([documentId])
  @@index([stockCategoryId])
  @@index([userId])
}

model tag {
  id            String          @id @db.VarChar(26)
  text          String          @unique @db.VarChar(63)
  paper_tag_map paper_tag_map[]
}

model user_group_map {
  userId  String @db.VarChar(26)
  groupId String @db.VarChar(26)
  isAdmin Int    @default(0) @db.UnsignedTinyInt
  group   group  @relation(fields: [groupId], references: [id])
  user    user   @relation(fields: [userId], references: [id])

  @@id([userId, groupId])
  @@index([groupId])
  @@index([userId])
}

model user_icon {
  id       String @id @db.VarChar(26)
  userId   String @unique @db.VarChar(26)
  mimeType String @db.VarChar(63)
  blob     Bytes? @db.Blob
  user     user   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user {
  id              String           @id @db.VarChar(26)
  uuid            String           @unique @db.VarChar(50)
  username        String           @unique @db.VarChar(50)
  email           String           @unique @db.VarChar(255)
  displayName     String?          @db.VarChar(255)
  hash            String?          @db.VarChar(127)
  createdAt       String           @db.VarChar(50)
  createdAtNumber BigInt           @default(0) @db.UnsignedBigInt
  attachment      attachment[]
  comment         comment[]
  comment_raw     comment_raw[]
  follow          follow[]         @relation("follow_fromUserIdTousers")
  followed        follow[]         @relation("follow_toUserIdTousers")
  like            like[]
  notification    notification[]
  paper           paper[]
  stock           stock[]
  stock_category  stock_category[]
  user_group_map  user_group_map[]
  user_icon       user_icon?
  watch           watch[]
}

enum configurations_ensureSingleRow {
  single
}

enum group_type {
  public
  normal
  private
}

enum saml_idp_userMapping {
  uuid
  username
  email
}
